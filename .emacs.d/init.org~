#+TITLE: Sophie's Emacs Configuration
#+AUTHOR: Sophie Bosio
#+PROPERTY: header-args :tangle yes
#+STARTUP: overview

* About

This is my attempt at keeping my Emacs configuration organised and readable.

I've tried to follow the way [[https://github.com/larstvei/][Lars Tveito]] has organised [[https://github.com/larstvei/dot-emacs/blob/master/init.org][his Emacs configuration]], including using Org mode and =org-babel-tangle= to both document and structure the configuration file.

I'm at the very beginning of learning Emacs, so if you have any suggestions or improvements, I would be very happy to hear about them!


* Pre-Configuration

** Meta
As mentioned, I use =org-babel-tangle= and this document, written in Org mode.

The code below extracts the elisp configuration code and creates/overwrites the =~/.emacs.d/init.el= configuration file when the =.org=-file is saved. Therefore, changes are only done in the =.org=-file, where writing longer comments about how things work and why things are added is easier, and then the resulting =init.el=-file remains clean and without excessive comments.

#+BEGIN_SRC emacs-lisp :tangle no
;; We need org in order to make use of the tangling functionality
(require 'org)
;; Open the org-mode configuration
(find-file (concat user-emacs-directory "init.org"))
;; Tangle the file
(org-babel-tangle)
;; Load the tangled file
(load-file (concat user-emacs-directory "init.el"))
;; Byte-compile it
(byte-compile-file (concat user-emacs-directory "init.el"))
#+END_SRC

** Git Tracking & Practicalities

Now we also don't need to track the generated =init.el= file on Git, since it is directly derived from =init.org=.

This code makes Git ignore changes to =init.el=:

#+BEGIN_SRC sh :tangle no
git update-index --assume-unchanged init.el
#+END_SRC

If you do want to start tracking the file again, you can use:

#+BEGIN_SRC sh :tangle no
git update-index --no-assume-unchanged init.el
#+END_SRC


* Emacs Configuration

** TODO Tangling

First, I want lexical scoping for the =init=-file, so I will add that to the top of the file.

#+BEGIN_SRC emacs-lisp
;;; -*- lexical-binding: t -*- 
#+END_SRC

*** TODO Tangling

** Start-Up

I want to make some tweaks to improve startup performance. First, a common tweak is to disable the garbage collector during initialisation, and then resetting it afterwards. At startup, I also want to know how long Emacs took to boot and how many garbage collections were made.

#+BEGIN_SRC emacs-lisp
(let ((old-gc-treshold gc-cons-threshold))
  (setq gc-cons-threshold most-positive-fixnum)
  (add-hook 'after-init-hook
            (lambda () (setq gc-cons-threshold old-gc-treshold))))

(add-hook 'emacs-startup-hook
          (lambda ()
            (message "*** Emacs loaded in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))
#+END_SRC

Set Emacs user directory explicitly:

#+BEGIN_SRC emacs-lisp
(setq user-emacs-directory "~/.emacs.d")
#+END_SRC

** Package Management

To manage downloaded packages, Emacs comes with =package.el= installed. First, we'll need to initalise that, and then I'll set elpa, melpa, and melpa stable as package sources. These are very common and well-maintained mirrors.

#+BEGIN_SRC emacs-lisp
;; First, we need package!
(require 'package)

(setq package-archives
      '(("GNU ELPA"     . "https://elpa.gnu.org/packages/")
        ("MELPA"        . "https://melpa.org/packages/"))
        ("ORG"          . "https://orgmode.org/elpa/")
        ("MELPA Stable" . "https://stable.melpa.org/packages/")
      package-archive-priorities
      '(("GNU ELPA"     . 10)
        ("MELPA"        . 5)
        ("ORG"          . 3)
        ("MELPA Stable" . 0)))

(package-initialize)
#+END_SRC

We also want to make sure packages are automatically installed and updated. The below code installs the listed packages if they are not already on the system.

#+BEGIN_SRC emacs-lisp 
  (let* ((package--builtins nil)
	 (packages
	  '(all-the-icons        ; Icon pack for pretty displays
	    auctex               ; Integrated environment for *TeX*
	    auto-compile         ; automatically compile Emacs Lisp libraries
	    chatgpt-shell        ; Interaction mode for ChatGPT
	    cider                ; Clojure Interactive Development Environment
	    clj-refactor         ; Commands for refactoring Clojure code
	    company              ; Modular text completion framework
	    company-coq          ; A collection of extensions PG's Coq mode
	    counsel              ; Various completion functions using Ivy
	    counsel-projectile   ; Ivy integration for Projectile
	    dashboard            ; A startup screen extracted from Spacemacs
	    define-word          ; display the definition of word at point
	    diff-hl              ; Highlight uncommitted changes using VC
	    direnv               ; direnv integration
	    doom-themes          ; An opinionated pack of modern color-themes
	    doom-modeline        ; Mode line used in Spacemacs
	    editorconfig         ; EditorConfig Emacs Plugin
	    erlang               ; Erlang major mode
	    expand-region        ; Increase selected region by semantic units
	    golden-ratio         ; Automatic resizing windows to golden ratio
	    haskell-mode         ; A Haskell editing mode
	    helpful              ; Easy-to-read docs that work with Counsel
	    ivy                  ; Incremental Vertical completYon
	    ivy-posframe         ; Using posframe to show Ivy
	    ivy-fuz              ; Fuzzy searching with Ivy and fuz
	    ivy-prescient        ; Sort and filter Ivy candidates
	    ivy-rich             ; Friendly display transformer for Ivy
	    jedi                 ; Python auto-completion for Emacs
	    js2-mode             ; Improved JavaScript editing mode
	    lua-mode             ; a major-mode for editing Lua scripts
	    magit                ; control Git from Emacs
	    markdown-mode        ; Emacs Major mode for Markdown-formatted files
	    maude-mode           ; Emacs mode for the programming language Maude
	    multiple-cursors     ; Multiple cursors for Emacs
	    nano-modeline        ; N Λ N O modeline
	    nano-theme           ; N Λ N O theme
	    nix-mode             ; Major mode for editing .nix files
	    ob-chatgpt-shell     ; Org babel functions for ChatGPT evaluation
	    olivetti             ; Minor mode for a nice writing environment
	    org                  ; Outline-based notes management and organizer
	    org-bullets          ; Show bullets in org-mode as UTF-8 characters
	    org-msg              ; Org mode to send and reply to email in HTML
	    ox-gfm               ; Export Github Flavored Markdown from Org
	    paredit              ; minor mode for editing parentheses
	    pdf-tools            ; Emacs support library for PDF files
	    projectile           ; Manage and navigate projects in Emacs easily
	    proof-general        ; A generic Emacs interface for proof assistants
	    racket-mode          ; Major mode for Racket language
	    rainbow-delimiters   ; Coloured bracket pairs
	    rustic               ; Rust development environment
	    slime                ; Superior Lisp Interaction Mode for Emacs
	    smex                 ; M-x interface with Ido-style fuzzy matching
	    svg-tag
	    try                  ; Try out Emacs packages
	    visual-fill-column   ; Center text
	    vterm                ; A terminal via libvterm
	    which-key            ; Display available keybindings in popup
	    z3-mode)))           ; z3/SMTLIBv2 interactive development
    (let ((packages (seq-remove 'package-installed-p packages)))
      (when packages
	;; Install uninstalled packages
	(package-refresh-contents)
	(mapc 'package-install packages))))
#+END_SRC

I have a folder with extensions that have been downloaded manually. I'll add these to the =load-path= so Emacs knows where to look for them. My folder is called "local-extensions".

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/local-extentions/")
#+END_SRC

And load custom settings from =custom.el= if it exists.

#+BEGIN_SRC emacs-lisp
(setq custom-file (concat user-emacs-directory "custom.el"))
(when (file-exists-p custom-file)
  (load custom-file))
#+END_SRC

** Sane Defaults

I have some defaults that I like to have in my config. Please modify to your tastes!

I want to reduce the number of UI elements that I don't use, so I'll remove those and inhibit some default behaviours. I'll also make the scrolling a little smoother. 

#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message      t      ;; No startup message
      initial-scratch-message      nil    ;; Empty scratch buffer
      ring-bell-function          'ignore ;; No bell
      display-time-24hr-format     t      ;; Use 24h clock
      display-time-default-load-average nil  ;; Don't show me load time
      scroll-margin                0      ;; Space between top/bottom
      use-dialog-box               nil    ;; Disable dialog
      auto-revert-interval         1      ;; Refresh buffers fast
      echo-keystrokes              0.1    ;; Show keystrokes fast
      frame-inhibit-implied-resize 1      ;; Don't resize frame implicitly
      sentence-end-double-space    nil    ;; No double spaces
      recentf-max-saved-items 10000       ;; Show more recent files
      mouse-wheel-follow-mouse    't      ;; Scroll window under mouse
      scroll-step                  1      ;; Keyboard scroll one line at a time
      mouse-wheel-scroll-amount   '(1 ((shift) . 1)) ;; Scroll one line at a time
)

(set-fringe-mode 10)  ;; Fringe of 10
#+END_SRC

Some variables are buffer-local, so to change them globally, we need to use =setq-default= instead of the normal =setq=.

#+BEGIN_SRC emacs-lisp
(setq-default tab-width 4                       ;; Smaller tabs
              fill-column 79                    ;; Maximum line width
              indent-tabs-mode nil              ;; Use spaces instead of tabs
              split-width-threshold 160         ;; Split verticly by default
              split-height-threshold nil        ;; Split verticly by default
              frame-resize-pixelwise t          ;; Fine-grained frame resize
              auto-fill-function 'do-auto-fill  ;; Auto-fill-mode everywhere
)
#+END_SRC

I don't want to type out 'yes' or 'no' every time Emacs asks me something, so I'll set these to 'y' and 'n'.

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

To avoid clutter, let's put all the auto-saved files into one and the same directory.

#+BEGIN_SRC emacs-lisp
(defvar emacs-autosave-directory
  (concat user-emacs-directory "autosaves/")
  "This variable dictates where to put auto saves. It is set to a
  directory called autosaves located wherever your .emacs.d/ is
  located.")

;; Sets all files to be backed up and auto saved in a single directory.
(setq backup-directory-alist
      `((".*" . ,emacs-autosave-directory))
      auto-save-file-name-transforms
      `((".*" ,emacs-autosave-directory t)))
#+END_SRC

Set UFT-8 as preferred coding system.

#+BEGIN_SRC emacs-lisp
(set-language-environment "UTF-8")
#+END_SRC

I want a small border around the whole frame, because I think it looks nicer.

#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(internal-border-width . 22))
#+END_SRC

And when I open Emacs, I want it to open maximised and fullscreen by default.

#+BEGIN_SRC emacs-lisp
(set-frame-parameter (selected-frame) 'fullscreen 'maximized)
(add-to-list 'default-frame-alist     '(fullscreen . maximized))
(add-hook 'window-setup-hook          'toggle-frame-fullscreen t)  ;; F11
#+END_SRC

And finally, I want to use =ripgrep= as =grep=.

#+BEGIN_SRC emacs-lisp
(setq grep-command "rg -nS --no-heading "
      grep-use-null-device nil)
#+END_SRC

** Minor Modes

There are some default modes I want to disable.

#+BEGIN_SRC emacs-lisp
(dolist (mode
    '(tool-bar-mode        ;; Remove toolbar
      scroll-bar-mode      ;; Remove scollbars
      menu-bar-mode        ;; Remove menu bar
      blink-cursor-mode))  ;; Solid cursor, not blinking
    (funcall mode 0))
#+END_SRc

And then there are some modes that I do want to activate!

#+BEGIN_SRC emacs-lisp
(dolist (mode
    '(column-number-mode        ;; Show current column number in mode line
      delete-selection-mode     ;; Replace selected text when yanking
      dirtrack-mode             ;; Directory tracking in shell
      display-battery-mode      ;; Display battery percentage in mode line
      display-time-mode         ;; Display time in mode line
      editorconfig-mode         ;; Use the editorconfig plugin
      global-company-mode       ;; Auto-completion everywhere
      global-diff-hl-mode       ;; Highlight uncommitted changes
      global-so-long-mode       ;; Mitigate performance for long lines
      global-visual-line-mode   ;; Break lines instead of truncating them
      counsel-projectile-mode   ;; Manage and navigate projects
      recentf-mode              ;; Recently opened files
      show-paren-mode           ;; Highlight matching parentheses
      which-key-mode))          ;; Available key-bindings in popup
    (funcall mode 1))
(set-fringe-mode 10)            ;; Set fringe width to 10
#+END_SRC

And I do want line numbers, but only in programming modes.

#+BEGIN_SRC emacs-lisp
(add-hook
   'prog-mode-hook 'display-line-numbers-mode) ;; Only line numbers when coding
#+END_SRC

** Font

I want my font to look big enough on my laptop screen, and I also want font ligatures and prettified greek letters

#+BEGIN_SRC emacs-lisp
(defvar efs/default-font-size          102)   ;; Define default font size
(defvar efs/default-variable-font-size 102)   ;; Define default variable-pitch font size

;; Set font face
(set-face-attribute 'default nil :font "JetBrainsMono Nerd Font Mono" :height efs/default-font-size)
(set-face-attribute 'fixed-pitch nil :font "JetBrainsMono Nerd Font Mono" :height efs/default-font-size)
(set-face-attribute 'variable-pitch nil :font "Iosevka Aile" :height efs/default-variable-font-size)

;; Font ligatures
(defvar ligatures-JetBrainsMono
  '("--" "---" "==" "===" "!=" "!==" "=!=" "=:=" "=/=" "<=" ">=" "&&" "&&&" "&=" "++" "+++"
   "***" ";;" "!!" "??" "?:" "?." "?=" "<:" ":<" ":>" ">:" "<>" "<<<" ">>>" "<<" ">>" "||" "-|"
   "_|_" "|-" "||-" "|=" "||=" "##" "###" "####" "#{" "#[" "]#" "#(" "#?" "#_" "#_(" "#:"
   "#!" "#=" "^=" "<$>" "<$" "$>" "<+>" "<+ +>" "<*>" "<* *>" "</" "</>" "/>" "<!--"
   "<#--" "-->" "->" "->>" "<<-" "<-" "<=<" "=<<" "<<=" "<==" "<=>" "<==>" "==>" "=>"
   "=>>" ">=>" ">>=" ">>-" ">-" ">--" "-<" "-<<" ">->" "<-<" "<-|" "<=|" "|=>" "|->" "<-"
   "<~~" "<~" "<~>" "~~" "~~>" "~>" "~-" "-~" "~@" "[||]" "|]" "[|" "|}" "{|" "[<" ">]"
   "|>" "<|" "||>" "<||" "|||>" "|||>" "<|>" "..." ".." ".=" ".-" "..<" ".?" "::" ":::"
   ":=" "::=" ":?" ":?>" "//" "///" "/*" "*/" "/=" "//=" "/==" "@_" "__"))
(use-package ligature
  :load-path "~/.emacs.d/elpa/ligature-20220808.1225/ligature.el"
  :config
  (ligature-set-ligatures 'prog-mode ligatures-JetBrainsMono)
  (global-ligature-mode t))

;; Prettify greek letters
(setq-default prettify-symbols-alist '(("lambda" . ?λ)
                                       ("delta" . ?Δ)
                                       ("gamma" . ?Γ)
                                       ("phi" . ?φ)
                                       ("psi" . ?ψ)))
#+END_SRC

** Themes

I really like the doom-themes, so I'll get those. I also want to be able to cycle through themes easily, so I'll use =cycle-themes.el= to do that with their standard keybinding, =C-c C-t=

#+BEGIN_SRC emacs-lisp
;; Set theme
(load-theme 'doom-nord-light)

;; Cycle through themes
(setq cycle-themes-theme-list
      '(doom-nord-light doom-miramare doom-flatwhite doom-nord doom-opera))

(require 'cycle-themes)
(cycle-themes-mode)

;; Change colour of fringes to match
(add-hook 'cycle-themes-after-cycle-hook
          #'(lambda ()
              (dolist (frame (frame-list))
                (set-face-attribute 'fringe frame 
                   :background (face-background 'default)))))
#+END_SRC

** Mode Line

TODO Change to Nano mode line

I like the Doom mode line, but I want to remove some features I don't use.

#+BEGIN_SRC emacs-lisp
(require 'doom-modeline)
(setq doom-modeline-bar-width 6                        ;; Bar width
      doom-modeline-height 30                          ;; Mode line height
      doom-modeline-buffer-state-icon nil              ;; Hide buffer state
      doom-modeline-buffer-encoding nil                ;; Hide encoding
      doom-modeline-time-icon nil                      ;; Hide time icon
      doom-modeline-time t                             ;; Clock
      doom-modeline-battery t                          ;; Display battery %
      doom-modeline-buffer-file-name-style 'file-name  ;; Display name, not path
)
#+END_SRC

I also prefer for the mode line to be in the header, rather than in the footer, of Emacs. I have a local plugin in my =~/.emacs.d/local-extensions= folder called =mode-line-in-header.el= that I'll use.

#+BEGIN_SRC emacs-lisp
(require 'mode-line-in-header)
(global-mode-line-in-header 1)
#+END_SRC

** Dashboard

Dashboard is the starting page from Spacemacs.

#+BEGIN_SRC emacs-lisp
(require 'dashboard)
(dashboard-setup-startup-hook)
(setq dashboard-banner-logo-title nil
      dashboard-center-content t
      dashboard-set-footer nil
      dashboard-page-separator "\n\n\n"
      dashboard-items '((projects . 15)
                        (recents  . 15)
                        (bookmarks . 5)))
#+END_SRC

** PDF Tools

This displays PDFs in a much more beautiful way.

#+BEGIN_SRC emacs-lisp
(pdf-loader-install)
#+END_SRC

However, it takes a long time to load, so we'll wait to load it until we try to open a PDF. Then it'll take a long time to open the first PDF, but all the others will load quickly, and we don't need to spend any extra start-up time when we don't need to open any PDFs.

#+BEGIN_SRC emacs-lisp
(add-hook 'pdf-view-mode-hook
          (lambda () (setq header-line-format nil)))
#+END_SRC	  

** Ivy

Ivy is a package for "Incremental Vertical completYon", giving you fuzzy completion suggestions in the minibuffer.

#+BEGIN_SRC emacs-lisp
(setq ivy-wrap t                         ;; Scrolling up brings me to last cand.
      ivy-height 25                      ;; Make Ivy taller
      ivy-use-virtual-buffers t          ;; C-x b displays recents and bookmarks
      ivy-on-del-error-function 'ignore  ;; Let me hold in backspace
      ivy-virtual-abbreviate 'abbreviate ;; Disambiguate same file diff dirs
)
(ivy-mode 1)
#+END_SRC

Since it's so widely used, Ivy also integrates nicely with a host of other packages and extensions. Two really nice ones are Counsel, which replaces Emacs commands with Ivy-specific ones, and Swiper, which uses Ivy to display search results.

#+BEGIN_SRC emacs-lisp
(require 'counsel)
(setq enable-recursive-minibuffers t
      search-default-mode #'char-fold-to-regexp)
(global-set-key "C-s" 'swiper)
(global-set-key (kbd "C-c C-r") 'ivy-resume)
(global-set-key (kbd "<f6>") 'ivy-resume)
(global-set-key (kbd "M-x") 'counsel-M-x)
(global-set-key (kbd "C-x C-f") 'counsel-find-file)
(global-set-key (kbd "<f1> f") 'counsel-describe-function)
(global-set-key (kbd "<f1> v") 'counsel-describe-variable)
(global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
(global-set-key (kbd "<f1> l") 'counsel-find-library)
(global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
(global-set-key (kbd "<f2> u") 'counsel-unicode-char)
(global-set-key (kbd "C-c g") 'counsel-git)
(global-set-key (kbd "C-c j") 'counsel-git-grep)
(global-set-key (kbd "C-c k") 'counsel-ag)
(global-set-key (kbd "C-x l") 'counsel-locate)
(global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
(define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
#+END_SRc

I also want to display the minibuffer as a separate child frame with =ivy-posframe=, fuzzy search with =ivy-fuz=, sorting and filtering of candidates with =ivy-prescient=, and =ivy-rich= is a display transformer making Ivy easier on the eyes. 

#+BEGIN_SRC emacs-lisp
;; Posframe, to display minibuffer as a child frame
(require 'ivy-posframe)
(setq ivy-posframe-display-functions-alist '(
        (t . ivy-posframe-display)                 ;; Display the posframe
        (t . ivy-posframe-display-at-frame-center) ;; Display at frame center
    )
    ivy-posframe-height ivy-height                 ;; Same height as Ivy
    ivy-posframe-width 80                          ;; Narrow box
    ivy-posframe-border-width 0                    ;; No surrounding border
)
(ivy-posframe-mode 1)

;; Fuzzy search
(setq ivy-sort-matches-functions-alist '((t . ivy-fuz-sort-fn)))
(setq ivy-re-builders-alist '((t . ivy-fuz-regex-fuzzy)))
(with-eval-after-load 'ivy
  (require 'ivy-fuz)
  (add-to-list 'ivy-highlight-functions-alist '(ivy-fuz-regex-fuzzy . ivy-fuz-highlight-fn)))

;; Sorting and filtering candidates
(with-eval-after-load 'counsel
    (require' ivy-prescient)
    (setq ivy-prescient-enable-filtering nil)
    (ivy-prescient-mode 1))

;; Display transformer for Ivy
(with-eval-after-load 'ivy
    (ivy-rich-mode 1))
#+END_SRC

** Helpful

Helpful is an improvement on Emacs' built-in *help* buffer. It's more user-friendly and easier to read.

Since I'm using Ivy and Counsel, I already have overwritten some standard Emacs keybindings. Therefore, I'll remap Counsel's functions for describing a function and a variable to the equivalent Helpful functions.

I'll also set some global keybindings that have not already been overwritten.

#+BEGIN_SRC emacs-lisp
(setq counsel-describe-function-function #'helpful-callable  ;; C-h f
      counsel-describe-variable-function #'helpful-variable) ;; C-h v
(global-set-key (kbd "C-h x") #'helpful-command)             ;; C-h x
(global-set-key (kbd "C-h k") #'helpful-key)                 ;; C-h k
(global-set-key (kbd "C-c C-d") #'helpful-at-point)          ;; C-c C-d
(global-set-key (kbd "C-h F") #'helpful-function)            ;; C-h F
#+END_SRC

** Text Auto-Completion

=company-mode= is an auto-completion framework meant to "COMPlete ANYthing". I want pretty aggressive completion suggestions.

#+BEGIN_SRC emacs-lisp
(setq company-idle-delay 0
      company-echo-delay 0
      company-dabbrev-downcase nil
      company-minimum-prefix-length 2
      company-selection-wrap-around t
      company-transformers '(company-sort-by-occurrence
                             company-sort-by-backend-importance))
#+END_SRC

** TODO Spelling

** TODO Magit

** SVG Tags

Actually, a TODO is to change this to Rougier's =svg-lib=, which has more features!

[[https://github.com/rougier][Nicolas Rougier]] has (among many other nice things!) a minor mode for displaying keywords as tags called =svg-tag-mode=. I want the full experience, so I'll ask the extension to beautify the tags for TODOs, DONEs, dates, citations, progress bars, priorities, and Org mode tags. I also want it enabled by default.

#+BEGIN_SRC emacs-lisp
(require 'svg-tag-mode)

(defconst date-re "[0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\}")
(defconst time-re "[0-9]\\{2\\}:[0-9]\\{2\\}")
(defconst day-re "[A-Za-z]\\{3\\}")
(defconst day-time-re (format "\\(%s\\)? ?\\(%s\\)?" day-re time-re))

(defun svg-progress-percent (value)
  (svg-image (svg-lib-concat
              (svg-lib-progress-bar (/ (string-to-number value) 100.0)
                                nil :margin 0 :stroke 2 :radius 3 :padding 2 :width 11)
              (svg-lib-tag (concat value "%")
                           nil :stroke 0 :margin 0)) :ascent 'center))

(defun svg-progress-count (value)
  (let* ((seq (mapcar #'string-to-number (split-string value "/")))
         (count (float (car seq)))
         (total (float (cadr seq))))
  (svg-image (svg-lib-concat
              (svg-lib-progress-bar (/ count total) nil
                                    :margin 0 :stroke 2 :radius 3 :padding 2 :width 11)
              (svg-lib-tag value nil
                           :stroke 0 :margin 0)) :ascent 'center)))

(setq svg-tag-tags
      `(
        ;; Org tags
        (":\\([A-Za-z0-9]+\\)" . ((lambda (tag) (svg-tag-make tag))))
        (":\\([A-Za-z0-9]+[ \-]\\)" . ((lambda (tag) tag)))
        
        ;; Task priority
        ("\\[#[A-Z]\\]" . ( (lambda (tag)
                              (svg-tag-make tag :face 'org-priority 
                                            :beg 2 :end -1 :margin 0))))

        ;; Progress
        ("\\(\\[[0-9]\\{1,3\\}%\\]\\)" . ((lambda (tag)
                                            (svg-progress-percent (substring tag 1 -2)))))
        ("\\(\\[[0-9]+/[0-9]+\\]\\)" . ((lambda (tag)
                                          (svg-progress-count (substring tag 1 -1)))))
        
        ;; TODO / DONE
        ("TODO" . ((lambda (tag) (svg-tag-make "TODO" :face 'org-todo :inverse t :margin 0))))
        ("DONE" . ((lambda (tag) (svg-tag-make "DONE" :face 'org-done :margin 0))))


        ;; Citation of the form [cite:@Knuth:1984] 
        ("\\(\\[cite:@[A-Za-z]+:\\)" . ((lambda (tag)
                                          (svg-tag-make tag
                                                        :inverse t
                                                        :beg 7 :end -1
                                                        :crop-right t))))
        ("\\[cite:@[A-Za-z]+:\\([0-9]+\\]\\)" . ((lambda (tag)
                                                (svg-tag-make tag
                                                              :end -1
                                                              :crop-left t))))

        
        ;; Active date (with or without day name, with or without time)
        (,(format "\\(<%s>\\)" date-re) .
         ((lambda (tag)
            (svg-tag-make tag :beg 1 :end -1 :margin 0))))
        (,(format "\\(<%s \\)%s>" date-re day-time-re) .
         ((lambda (tag)
            (svg-tag-make tag :beg 1 :inverse nil :crop-right t :margin 0))))
        (,(format "<%s \\(%s>\\)" date-re day-time-re) .
         ((lambda (tag)
            (svg-tag-make tag :end -1 :inverse t :crop-left t :margin 0))))

        ;; Inactive date  (with or without day name, with or without time)
         (,(format "\\(\\[%s\\]\\)" date-re) .
          ((lambda (tag)
             (svg-tag-make tag :beg 1 :end -1 :margin 0 :face 'org-date))))
         (,(format "\\(\\[%s \\)%s\\]" date-re day-time-re) .
          ((lambda (tag)
             (svg-tag-make tag :beg 1 :inverse nil :crop-right t :margin 0 :face 'org-date))))
         (,(format "\\[%s \\(%s\\]\\)" date-re day-time-re) .
          ((lambda (tag)
             (svg-tag-make tag :end -1 :inverse t :crop-left t :margin 0 :face 'org-date))))))

(global-svg-tag-mode t)

;; To do:         TODO DONE  
;; Tags:          :TAG1:TAG2:TAG3:
;; Priorities:    [#A] [#B] [#C]
;; Progress:      [1/3]
;;                [42%]
;; Active date:   <2021-12-24>
;;                <2021-12-24 Fri>
;;                <2021-12-24 14:00>
;;                <2021-12-24 Fri 14:00>
;; Inactive date: [2021-12-24]
;;                [2021-12-24 Fri]
;;                [2021-12-24 14:00]
;;                [2021-12-24 Fri 14:00]
;; Citation:      [cite:@Knuth:1984]
#+END_SRC

** Treemacs


* Org & Roam

** TODO Org

Also in here, TODO add [[https://github.com/rougier/org-outer-indent][Rougier's org-outer-indent]] to style numbered headings.
And some bullet-point transformer to prettify headlines with *'s.

Org-bullets will prettify our document headers and lists.

#+begin_src emacs-lisp
(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** TODO Roam



* Major (Language) Modes
